1. Set:
Insert into a HashMap => O(1)

2. Get:
- comparision "!=" : O(1);
Access from HashMap : O(1)

=> O(1)

3. Sadd:
- Search from HashMap: O(1)
- Insert into a Set ( also using HashMap) : O(1)
- Insert into a HashMap: O(1)
- Loop for many N insertions: O(N)
- Comparision "==" : O(1)
- Get size of a HashMap : O(1)

=> O(1) for 1 insert, hence O(N) for N insert.

4. Srem:
- Search from HashMap: O(1)
- Delete from a Set ( also using HashMap) : O(1)
- Loop for many N insertions: O(N)
- Comparision "==" : O(1)
- Get size of a HashMap : O(1)

=> O(1) for 1 delete, hence O(N) for N delete.

5. Smembers:
- Search from HashMap: O(1)
- Comparision "==" : O(1)
- Loop in range(0, set.size): O(N)
- Push into an array: O(1)

=> O(N)

6. Sinter:
- Loop in M set input, sử dụng phép so sánh "<" với O(1) để trả về tên của set có size bé nhất: O(M)

- Loop trong set có size bé nhất với số phần tử N (bé nhấ)t:
- Với mỗi phần tử, loop lại M set: O(M)
- Search trong các set phần tử đó: O(1), nếu có tăng biết count lên 1.
- Kết thúc mỗi vòng loop M, so sánh biến count và M - 1, nếu count = M - 1, array push vào arrayOuput: O(1)

=> Tổng: O(M x N). Với M là số set input và N là số phần tử của set có size nhỏ nhất.

Đặc biệt: Nếu SINTER *, sẽ loop in set.size với set đó là value của key: "setType" từ myMap HashMap. Mục đích để chỉ là O(S) với S là number of sets, chứ không phải O(K) với K là toàn bộ keys. 

7. Keys:
- Convert to array from all keys in HashMap: O(N)
- Loop that array and array push (O(1)): O(N)

=> O(N)

8. Del:
- Delete an element from hashmap : O(1)
- Delete an element from set: O(1)

=> O(1) for each element.

9. 


